#!/bin/bash

set -e

pipe_name=${1}
env=${2}
cores=${3}

if [ -z "${pipe_name}" ] || [ -z "${env}" ]; then
    echo "syntax: ${0} <pipe-name> <environment-name> <core#>" 1>&2
    echo "where:" 1>&2
    echo "    <pipe-name> must be a predefined pipeline" 1>&2
    echo "    <environment-path> must exist under conf/. Default is <conf/base>." 1>&2
    echo "    core# is the number of cores for this job" 1>&2
    exit 1
fi

if [ ! -d "src/sampler/pipelines/${pipe_name}" ]; then
    echo "pipeline 'src/sampler/pipelines/${pipe_name}' not found" 1>&2
    exit 1
fi

# Remove the 'conf/' prefix from the environment input
if [[ "${env}" == conf/* ]]; then
    env="${env#conf/}"
fi

if [ ! -d "conf/${env}" ]; then
    echo "environment 'conf/${env}' not found" 1>&2
    exit 1
fi

now=$(date +%Y-%m-%d_%H:%M:%S)
out=data/09_std/${env}/${now}   
DIR=$(cd ${0%/*}; pwd)
mkdir -p ${out}

# Command to execute in sub-sbatch
EX="kedro run --pipeline ${pipe_name} --env ${env}"

# Execute the command
echo "Executing: ${EX}"

cat << EOF >> .sbatch-${now}
#!/bin/bash
#SBATCH --job-name=kedro-${pipe_name}-${env}
#SBATCH --ntasks=1
#SBATCH --cpus-per-task=${cores}
#SBATCH --output=${out}/stdout.txt
#SBATCH --error=${out}/stderr.txt

####SBATCH --mail-type=ALL
# --mem-per-cpu: default maximum is 3.5GB
# example: reserving 100GBytes per task (allowing max 256G/100G=2 tasks per node)
####SBATCH --mem-per-cpu=100G

#### User customization -------------

echo

echo "default_python3=$(which python3)" 
echo "venv=${DIR}/venv/bin/activate"

. venv/bin/activate

eval echo "used_python3=\$(which python3)"
eval echo "version=\$(python3 --version)"
eval echo "used_kedro=\$(which kedro)"
echo "EX=${EX}"
echo "pwd=$(pwd)"

#### End of user customization ------

time $EX
EOF

echo "starting, stdout/stderr output are stored into ${out}/"
sbatch .sbatch-${now}
